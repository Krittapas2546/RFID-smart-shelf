from fastapi import FastAPI
import uvicorn
from fastapi.staticfiles import StaticFiles
import pathlib
import socket

# --- Import Routers ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á ---
from api import jobs, websockets

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô FastAPI ‡∏´‡∏•‡∏±‡∏Å
app = FastAPI(
    title="RFID Smart Shelf API (Refactored)",
    description="A professional, well-structured server for the Smart Shelf system.",
    version="2.0.0"
)

# --- START: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ---
# Mount ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå static ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö path /static
STATIC_PATH = pathlib.Path(__file__).parent / "static"
app.mount("/static", StaticFiles(directory=STATIC_PATH), name="static")

# "‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏£‡πà‡∏≤‡∏á" Router ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
app.include_router(jobs.router)
app.include_router(websockets.router)
# --- END: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ---


# --- Main ---
if __name__ == "__main__":
    def get_local_ip():
        try:
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á DNS ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ IP ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
            with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
                s.connect(("8.8.8.8", 80))
                return s.getsockname()[0]
        except:
            return "localhost"
    
    local_ip = get_local_ip()
    
    print("üöÄ Starting RFID Smart Shelf Server (v2.0 Refactored)...")
    print(f"üì± Smart Shelf UI: http://localhost:8000")
    print(f"üéÆ Event Simulator: http://localhost:8000/simulator")
    print(f"üìÑ API Docs:       http://localhost:8000/docs")
    print(f"üåê Network API:    http://{local_ip}:8000")  # ‡πÅ‡∏™‡∏î‡∏á IP ‡∏à‡∏£‡∏¥‡∏á
    print(f"üì± Pi Access:      http://{local_ip}:8000")   # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pi
    uvicorn.run(app, host="0.0.0.0", port=8000)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 127.0.0.1 ‡πÄ‡∏õ‡πá‡∏ô 0.0.0.0