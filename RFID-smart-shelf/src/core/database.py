# ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á" ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
# ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Server ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤)

# üîΩ FLEXIBLE SHELF CONFIGURATION üîΩ
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Block ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Level (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
SHELF_CONFIG = {
    1: 5,  # Level 1 ‡∏°‡∏µ 3 blocks
    2: 6,  # Level 2 ‡∏°‡∏µ 6 blocks  
    3: 4,  # Level 3 ‡∏°‡∏µ 4 blocks
    4: 5   # Level 4 ‡∏°‡∏µ 5 blocks
}

# ‡∏™‡∏£‡πâ‡∏≤‡∏á shelf_state ‡∏ï‡∏≤‡∏° SHELF_CONFIG
def create_initial_shelf_state():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á‡∏ï‡∏≤‡∏° SHELF_CONFIG"""
    shelf_state = []
    for level, num_blocks in SHELF_CONFIG.items():
        for block in range(1, num_blocks + 1):
            shelf_state.append([level, block, 0, None])  # [level, block, hasItem, lot_no]
    return shelf_state

DB = {
    "jobs": [],
    "shelf_state": create_initial_shelf_state(),
    "job_counter": 0
}

# --- Helper Functions ---
def get_job_by_id(job_id: str):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Job ‡∏à‡∏≤‡∏Å ID ‡πÉ‡∏ô DB"""
    return next((job for job in DB["jobs"] if job.get("jobId") == job_id), None)

def update_shelf_state(level: int, block: int, has_item: int, lot_no: str = None):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏ô Shelf (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á lot_no)"""
    for i, cell in enumerate(DB["shelf_state"]):
        if cell[0] == level and cell[1] == block:
            DB["shelf_state"][i][2] = has_item
            DB["shelf_state"][i][3] = lot_no  # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï lot_no
            return

def get_lot_in_position(level: int, block: int):
    """‡∏î‡∏∂‡∏á lot_no ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    for cell in DB["shelf_state"]:
        if cell[0] == level and cell[1] == block:
            return cell[3]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô lot_no
    return None

def validate_position(level: int, block: int):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    return level in SHELF_CONFIG and 1 <= block <= SHELF_CONFIG[level]

def get_shelf_info():
    """‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á"""
    return {
        "config": SHELF_CONFIG,
        "total_levels": len(SHELF_CONFIG),
        "max_blocks": max(SHELF_CONFIG.values()) if SHELF_CONFIG else 0
    }