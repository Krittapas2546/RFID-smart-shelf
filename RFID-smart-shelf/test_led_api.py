#!/usr/bin/env python3
"""
Test script for LED Control APIs
‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
"""

import requests
import json
import time

# Server URL
BASE_URL = "http://localhost:8000"

def test_led_by_position():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED ‡∏î‡πâ‡∏ß‡∏¢ position string ‡πÄ‡∏ä‡πà‡∏ô L1B1"""
    print("üîµ Testing LED control by position...")
    
    # ‡∏ï‡∏¥‡∏î‡πÑ‡∏ü‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏µ‡πà L1B1
    response = requests.post(f"{BASE_URL}/api/led/position", 
        json={
            "position": "L1B1",
            "r": 255,
            "g": 0,
            "b": 0
        }
    )
    print(f"L1B1 Red: {response.status_code} - {response.json()}")
    time.sleep(1)
    
    # ‡∏ï‡∏¥‡∏î‡πÑ‡∏ü‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà L2B3
    response = requests.post(f"{BASE_URL}/api/led/position",
        json={
            "position": "L2B3", 
            "r": 0,
            "g": 255,
            "b": 0
        }
    )
    print(f"L2B3 Green: {response.status_code} - {response.json()}")
    time.sleep(1)
    
    # ‡∏ï‡∏¥‡∏î‡πÑ‡∏ü‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà L1B3
    response = requests.post(f"{BASE_URL}/api/led/position",
        json={
            "position": "L1B3",
            "r": 0,
            "g": 0, 
            "b": 255
        }
    )
    print(f"L1B3 Blue: {response.status_code} - {response.json()}")
    time.sleep(2)

def test_led_batch_positions():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô"""
    print("\nüåà Testing batch LED control by positions...")
    
    response = requests.post(f"{BASE_URL}/api/led/positions",
        json={
            "positions": [
                {"position": "L1B1", "r": 255, "g": 0, "b": 0},    # ‡πÅ‡∏î‡∏á
                {"position": "L1B2", "r": 0, "g": 255, "b": 0},    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                {"position": "L1B3", "r": 0, "g": 0, "b": 255},    # ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
                {"position": "L2B1", "r": 255, "g": 255, "b": 0},  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
                {"position": "L2B2", "r": 255, "g": 0, "b": 255},  # ‡∏°‡πà‡∏ß‡∏á
            ]
        }
    )
    print(f"Batch positions: {response.status_code}")
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ Successfully controlled {result['count']} LEDs")
        print(f"Positions: {result['positions']}")
    else:
        print(f"‚ùå Error: {response.json()}")
    time.sleep(3)

def test_invalid_positions():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ position ‡∏ú‡∏¥‡∏î‡πÜ"""
    print("\n‚ùå Testing invalid positions...")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö format ‡∏ú‡∏¥‡∏î
    response = requests.post(f"{BASE_URL}/api/led/position",
        json={
            "position": "INVALID",
            "r": 255,
            "g": 0,
            "b": 0
        }
    )
    print(f"Invalid format: {response.status_code} - {response.json()['error']}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    response = requests.post(f"{BASE_URL}/api/led/position",
        json={
            "position": "L10B10",  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            "r": 255,
            "g": 0,
            "b": 0
        }
    )
    print(f"Invalid position: {response.status_code} - {response.json()['error']}")

def test_clear_leds():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("\nüîò Testing clear all LEDs...")
    
    response = requests.post(f"{BASE_URL}/api/led/clear")
    print(f"Clear LEDs: {response.status_code} - {response.json()}")

def test_shelf_config():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö configuration ‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á"""
    print("\nüìä Getting shelf configuration...")
    
    response = requests.get(f"{BASE_URL}/api/shelf/config")
    if response.status_code == 200:
        config = response.json()
        print(f"Shelf config: {config}")
        print(f"Total levels: {config['total_levels']}")
        print(f"Max blocks: {config['max_blocks']}")
        print("Available positions:")
        for level, blocks in config['config'].items():
            positions = [f"L{level}B{block}" for block in range(1, blocks + 1)]
            print(f"  Level {level}: {positions}")
    else:
        print(f"‚ùå Error getting config: {response.json()}")

def run_led_demo():
    """‡∏£‡∏±‡∏ô‡πÄ‡∏î‡πÇ‡∏°‡πà‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô LED APIs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üöÄ Starting LED API Demo...")
    print("=" * 50)
    
    try:
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö config ‡∏Å‡πà‡∏≠‡∏ô
        test_shelf_config()
        
        # 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏î‡∏ß‡∏á
        test_led_by_position()
        
        # 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏î‡∏ß‡∏á
        test_led_batch_positions()
        
        # 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö error handling
        test_invalid_positions()
        
        # 5. ‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        test_clear_leds()
        
        print("\n‚úÖ Demo completed successfully!")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Connection error: Make sure the server is running at http://localhost:8000")
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")

if __name__ == "__main__":
    run_led_demo()
