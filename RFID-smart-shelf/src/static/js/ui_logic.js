// üîΩ FIX CONSTANTS üîΩ
        const ACTIVE_JOB_KEY = 'activeJob';
        const GLOBAL_SHELF_STATE_KEY = 'globalShelfState';
        const QUEUE_KEY = 'shelfQueue';
        // üîº END OF CONSTANTS üîº

        // üîΩ ADD MISSING DOM ELEMENTS üîΩ
        const queueSelectionView = document.getElementById('queueSelectionView');
        const activeJobView = document.getElementById('activeJobView');
        const queueListContainer = document.getElementById('queueListContainer');
        const jobDetailsContainer = document.getElementById('jobDetailsContainer');
        const detailsPanel = document.getElementById('detailsPanel');
        const mainView = document.getElementById('mainView');
        const shelfGrid = document.getElementById('shelfGrid');
        const shelfContainer = document.getElementById('shelfContainer');
        // üîº END OF DOM ELEMENTS üîº

        const ROWS = 4, COLS = 6;

        function initializeShelfState() {
            if (!localStorage.getItem(GLOBAL_SHELF_STATE_KEY)) {
                const defaultState = [];
                for (let r = 1; r <= ROWS; r++) {
                    for (let c = 1; c <= COLS; c++) {
                        defaultState.push([r, c, 0]); // [level, block, hasItem]
                    }
                }
                localStorage.setItem(GLOBAL_SHELF_STATE_KEY, JSON.stringify(defaultState));
            }
        }

        function cleanInvalidJobs() {
            const queue = JSON.parse(localStorage.getItem(QUEUE_KEY) || '[]');
            const cleanedQueue = queue.filter(job => job && job.lot_no && job.level && job.block);
            if (cleanedQueue.length !== queue.length) {
                console.warn("Removed invalid jobs from the queue.");
                localStorage.setItem(QUEUE_KEY, JSON.stringify(cleanedQueue));
            }
            return cleanedQueue;
        }

        function getQueue() {
            return cleanInvalidJobs();
        }

        function createShelfGridStructure() {
            if (shelfGrid.children.length > 0) {
                return;
            }
            
            console.log('üèóÔ∏è Creating shelf grid structure...');
            shelfGrid.innerHTML = '';
            for (let r = 1; r <= ROWS; r++) {
                for (let c = 1; c <= COLS; c++) {
                    const cell = document.createElement('div');
                    cell.id = `cell-${r}-${c}`;
                    cell.className = 'shelf-cell';
                    shelfGrid.appendChild(cell);
                }
            }
        }

        function getActiveJob() {
            const activeJobData = localStorage.getItem(ACTIVE_JOB_KEY);
            console.log('üîç getActiveJob() called:', activeJobData);
            
            if (!activeJobData || activeJobData === 'null') {
                console.log('‚ùå No active job found');
                return null;
            }
            
            try {
                const job = JSON.parse(activeJobData);
                console.log('‚úÖ Active job found:', job);
                return job;
            } catch (error) {
                console.error('‚ùå Error parsing active job:', error);
                localStorage.removeItem(ACTIVE_JOB_KEY);
                return null;
            }
        }

        function setActiveJob(job) {
            console.log('üîç setActiveJob() called with:', job);
            localStorage.setItem(ACTIVE_JOB_KEY, JSON.stringify(job));
            console.log('‚úÖ Active job saved to localStorage');
        }

        // üîΩ FIX goBackToQueue FUNCTION üîΩ
        function goBackToQueue() {
            localStorage.removeItem(ACTIVE_JOB_KEY); // ‡πÉ‡∏ä‡πâ Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            renderAll();
        }
        // üîº END OF FIX üîº

        function renderShelfGrid() {
            const shelfState = JSON.parse(localStorage.getItem(GLOBAL_SHELF_STATE_KEY) || '[]');
            const activeJob = getActiveJob();

            console.log('üîç DEBUG: renderShelfGrid called');
            console.log('üîç DEBUG: activeJob =', activeJob);
            console.log('üîç DEBUG: shelfState =', shelfState);

            shelfState.forEach(([level, block, hasItem]) => {
                const cell = document.getElementById(`cell-${level}-${block}`);
                if (!cell) return;

                // Reset class ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                cell.className = 'shelf-cell';

                // --- START: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Logic ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
                if (activeJob) {
                    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ Active Job ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
                    const isTaskLocation = Number(activeJob.level) === Number(level) && 
                                           Number(activeJob.block) === Number(block);
                    const isError = activeJob.error;

                    if (isTaskLocation) {
                        if (isError) {
                            cell.classList.add('wrong-location');
                            console.log(`üî¥ Error location: [${level},${block}]`);
                        } else {
                            cell.classList.add('selected-task');
                            console.log(`üîµ Target location: [${level},${block}]`);
                        }
                    }
                    // üîΩ ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å - ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ Active Job üîΩ
                    // else if (hasItem) {
                    //     cell.classList.add('has-item');
                    //     console.log(`‚ö´ Has item: [${level},${block}]`);
                    // }
                    // üîº END OF REMOVAL üîº
                } else {
                    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Active Job ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á
                    if (hasItem) {
                        cell.classList.add('has-item');
                        console.log(`‚ö´ Has item (no active job): [${level},${block}]`);
                    }
                }
                // --- END: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Logic ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
            });
        }

        function renderActiveJob() {
            const activeJob = getActiveJob();
            const queue = getQueue();
            
            if (!detailsPanel) {
                console.error('‚ùå detailsPanel element not found');
                return;
            }

            detailsPanel.innerHTML = '';

            if (activeJob) {
                const statusText = activeJob.error ? 'Error' : 'Waiting';
                const statusClass = activeJob.error ? 'Error' : 'Waiting';
                const actionText = activeJob.place_flg === '1' ? 'Place To' : 'Pick From';
                
                detailsPanel.innerHTML = `
                    <div>
                        <div class="label">Status</div>
                        <div class="status-badge ${statusClass}">${statusText}</div>
                    </div>
                    <div>
                        <div class="label">Lot No.</div>
                        <div class="value lot-no">${activeJob.lot_no}</div>
                    </div>
                    <div>
                        <div class="label">${actionText}</div>
                        <div class="value">Level: ${activeJob.level}, Block: ${activeJob.block}</div>
                    </div>
                    
                    <!-- üîΩ ADD ACTION BUTTONS üîΩ -->
                    <div class="action-buttons" style="margin-top: 20px;">
                        <button class="complete-btn" onclick="completeCurrentJob()" style="background: #28a745; color: white; padding: 10px 20px; border: none; border-radius: 5px; margin-right: 10px;">
                            ‚úÖ Complete
                        </button>
                        <button class="error-btn" onclick="reportJobError('MANUAL_ERROR', 'Manual error reported')" style="background: #dc3545; color: white; padding: 10px 20px; border: none; border-radius: 5px;">
                            ‚ùå Report Error
                        </button>
                    </div>
                    <!-- üîº END OF BUTTONS üîº -->
                `;
                
                if (queue.length > 0) {
                    detailsPanel.innerHTML += `<button class="back-to-queue-btn" onclick="goBackToQueue()">‚Üê Back to Queue</button>`;
                }
            } else {
                detailsPanel.innerHTML = `
                    <div>
                        <div class="label">Status</div>
                        <div class="status-badge">Idle</div>
                    </div>
                    <div class="value" style="font-size: 1.5rem; color: #6c757d;">No active job.</div>
                `;
            }
            renderShelfGrid();
        }

        function renderQueueSelectionView(queue) {
            queueListContainer.innerHTML = '';
            queue.forEach(job => {
                const li = document.createElement('li');
                li.className = 'queue-list-item';
                li.innerHTML = `
                    <div class="info">
                        <div class="lot">Lot: ${job.lot_no}</div>
                        <div class="action">Action: ${job.place_flg === '1' ? 'Place' : 'Pick'} at L:${job.level}, B:${job.block}</div>
                    </div>
                    <button class="select-btn" onclick="selectJob('${job.jobId}')">Select</button>
                `;
                queueListContainer.appendChild(li);
            });

            // --- START: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Logic Focus ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô ---
            // ‡πÉ‡∏ä‡πâ MutationObserver ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Input ‡∏ñ‡∏π‡∏Å Render ‡∏à‡∏£‡∏¥‡∏á‡πÜ
            ensureLotInputFocus();
            // --- END: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Logic Focus ---
        }

        // --- START: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ---
        function ensureLotInputFocus() {
            const lotInput = document.getElementById('lot-no-input');
            
            if (lotInput && lotInput.offsetParent !== null) {
                // Element ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ
                setupLotInputBehavior(lotInput);
            } else {
                // Element ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏´‡πâ‡∏£‡∏≠ DOM Update
                const observer = new MutationObserver((mutations) => {
                    const lotInput = document.getElementById('lot-no-input');
                    if (lotInput && lotInput.offsetParent !== null) {
                        setupLotInputBehavior(lotInput);
                        observer.disconnect(); // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï
                    }
                });
                
                observer.observe(document.body, {
                    childList: true,
                    subtree: true
                });
                
                // Safety timeout - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                setTimeout(() => {
                    observer.disconnect();
                }, 2000);
            }
        }

        function setupLotInputBehavior(lotInput) {
            // ‡∏•‡∏ö Event Listener ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
            lotInput.removeEventListener('keyup', handleLotKeyUp);
            lotInput.addEventListener('keyup', handleLotKeyUp);
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° Visual Cue
            lotInput.style.border = '2px solid #007bff';
            lotInput.style.boxShadow = '0 0 5px rgba(0,123,255,0.5)';
            
            // Force Focus ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            lotInput.focus();
            
            setTimeout(() => {
                lotInput.focus();
                console.log('‚úÖ Second focus attempt');
            }, 100);
            
            setTimeout(() => {
                lotInput.focus();
                console.log('‚úÖ Third focus attempt');
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Focus ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (document.activeElement === lotInput) {
                    console.log('üéØ Focus successful!');
                } else {
                    console.log('‚ùå Focus failed. Active element:', document.activeElement);
                }
            }, 200);
        }

        function handleLotKeyUp(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                handleLotSearch();
            }
        }
        // --- END: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ---

        function selectJob(jobId) {
            const queue = getQueue();
            const selectedJob = queue.find(job => job.jobId === jobId);
            
            console.log('üîç selectJob() called with:', jobId);
            console.log('üîç Selected job:', selectedJob);
            
            if (selectedJob) {
                setActiveJob(selectedJob);
                console.log('‚úÖ Active job set:', selectedJob);
                renderAll();
            } else {
                console.error('‚ùå Job not found:', jobId);
            }
        }

        // --- START: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ---
        /**
         * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Job ‡∏à‡∏≤‡∏Å Lot No. ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
         * @param {string} lotNo - The Lot No. to search for.
         */
        function findAndSelectJobByLot(lotNo) {
            if (!lotNo) return;

            console.log(`üîç Searching for Lot No: ${lotNo}`);
            const queue = getQueue();
            const foundJob = queue.find(job => job.lot_no === lotNo);

            if (foundJob) {
                showNotification(`‚úÖ Lot No. ${lotNo} found. Selecting job...`, 'success');
                selectJob(foundJob.jobId);
            } else {
                showNotification(`‚ùå Lot No. ${lotNo} not found in queue.`, 'error');
                const lotInput = document.getElementById('lot-no-input');
                if (lotInput) {
                    lotInput.classList.add('shake');
                    setTimeout(() => lotInput.classList.remove('shake'), 500);
                }
            }
        }

        /**
         * ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á input ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
         */
        function handleLotSearch() {
            const lotInput = document.getElementById('lot-no-input');
            if (lotInput) {
                const lotNoToSearch = lotInput.value.trim();
                
                // --- START: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server ---
                if (lotNoToSearch.length > 0) {
                    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏£‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
                    event?.stopPropagation();
                    event?.preventDefault();
                    
                    console.log(`üîç Local search for: ${lotNoToSearch}`);
                    findAndSelectJobByLot(lotNoToSearch);
                    lotInput.value = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á input
                }
                // --- END: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server ---
            }
        }
        // --- END: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ---

        function goBackToQueue() {
            localStorage.removeItem(ACTIVE_JOB_KEY); // ‡πÉ‡∏ä‡πâ Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            renderAll();
        }

        function renderAll() {
            const queue = getQueue();
            const activeJob = getActiveJob();

            console.log('üîÑ renderAll() - Queue:', queue.length, 'Active:', !!activeJob);

            // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Logic ‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠ ***
            if (queue.length > 0 && !activeJob) {
                // ‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å -> ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏°‡∏≠ (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ 1 ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢ Job)
                mainView.style.display = 'none';
                queueSelectionView.style.display = 'block';
                renderQueueSelectionView(queue);
                
            } else if (activeJob) {
                // ‡∏°‡∏µ Active Job ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß -> ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                queueSelectionView.style.display = 'none';
                mainView.style.display = 'flex';
                renderActiveJob();
                renderShelfGrid();
                
            } else {
                // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏¢ -> ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (Idle)
                queueSelectionView.style.display = 'none';
                mainView.style.display = 'flex';
                renderActiveJob(); // ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á "No active job"
                renderShelfGrid();
            }
        }

        // --- Initial Load ---
        document.addEventListener('DOMContentLoaded', () => {
            createShelfGridStructure();
            initializeShelfState();
            setupWebSocket();
            renderAll();
        });
        
        // ‡∏•‡∏ö Event Listener ‡∏Ç‡∏≠‡∏á 'storage' ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ WebSocket ‡πÅ‡∏ó‡∏ô
        window.removeEventListener('storage', renderAll);
        
        // *** START: WebSocket Integration ***
        let websocketConnection = null; // ‡πÄ‡∏Å‡πá‡∏ö WebSocket connection

        function setupWebSocket() {
            console.log("Attempting to connect to WebSocket at ws://localhost:8000/ws");
            const ws = new WebSocket(`ws://${window.location.host}/ws`);
            
            // ‡πÄ‡∏Å‡πá‡∏ö connection ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            websocketConnection = ws;

            ws.onopen = function(event) {
                console.log("‚úÖ WebSocket connection established.");
            };

            ws.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    console.log("üì© Received message from server:", data);

                    switch (data.type) {
                        case "initial_state":
                            localStorage.setItem(QUEUE_KEY, JSON.stringify(data.payload.jobs));
                            localStorage.setItem(GLOBAL_SHELF_STATE_KEY, JSON.stringify(data.payload.shelf_state));
                            renderAll();
                            break;
                        case "new_job":
                            const queue = getQueue();
                            if (!queue.some(job => job.jobId === data.payload.jobId)) {
                                queue.push(data.payload);
                                localStorage.setItem(QUEUE_KEY, JSON.stringify(queue));
                                renderAll();
                                showNotification(`New job added: ${data.payload.lot_no}`);
                            }
                            break;
                        case "job_completed":
                            let currentQueue = getQueue();
                            currentQueue = currentQueue.filter(j => j.jobId !== data.payload.completedJobId);
                            localStorage.setItem(QUEUE_KEY, JSON.stringify(currentQueue));
                            localStorage.setItem(GLOBAL_SHELF_STATE_KEY, JSON.stringify(data.payload.shelf_state));
                            localStorage.removeItem(ACTIVE_JOB_KEY); // ‡πÉ‡∏ä‡πâ Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                            renderAll();
                            showNotification(`Job completed.`);
                            break;
                        case "job_error":
                            localStorage.setItem(ACTIVE_JOB_KEY, JSON.stringify(data.payload)); // ‡πÉ‡∏ä‡πâ Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                            renderAll();
                            showNotification(`Job error reported for Lot ${data.payload.lot_no}`, 'error');
                            break;
                        case "system_reset":
                            localStorage.clear();
                            initializeShelfState();
                            renderAll();
                            showNotification('System has been reset.', 'warning');
                            break;
                    }
                } catch (e) {
                    console.error("Error parsing message from server:", e);
                }
            };

            ws.onclose = function(event) {
                console.log("‚ùå WebSocket connection closed. Reconnecting in 3 seconds...");
                setTimeout(setupWebSocket, 3000);
            };

            ws.onerror = function(error) {
                console.error("üí• WebSocket error:", error);
            };
        }
