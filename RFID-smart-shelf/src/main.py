"""
RFID Smart Shelf System - Simple FastAPI Server (Optional)

‚ö†Ô∏è  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô LEGACY CODE ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
    ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ä‡πâ Frontend-only (‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå HTML ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
    
    ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ FastAPI Server ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:
    uvicorn main:app --reload
    ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà http://localhost:8000
"""

import pathlib
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

# --- Setup ---
BASE_DIR = pathlib.Path(__file__).parent.resolve()
app = FastAPI(
    title="RFID Smart Shelf API",
    description="Simple server for serving HTML files and API endpoints",
    version="1.0.0"
)
templates = Jinja2Templates(directory=str(BASE_DIR / "templates"))

# --- Routes ---

@app.get("/", response_class=HTMLResponse)
def serve_shelf_ui(request: Request):
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Smart Shelf UI"""
    return templates.TemplateResponse("shelf_ui.html", {"request": request})

@app.get("/simulator", response_class=HTMLResponse)
def serve_simulator(request: Request):
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Event Simulator"""
    return templates.TemplateResponse("test_api.html", {"request": request})

@app.get("/health")
def health_check():
    """API Health Check"""
    return {"status": "ok", "message": "RFID Smart Shelf Server is running"}

# --- Main ---
if __name__ == "__main__":
    import uvicorn
    print("üöÄ Starting RFID Smart Shelf Server...")
    print("üì± Smart Shelf UI: http://localhost:8000")
    print("üéÆ Event Simulator: http://localhost:8000/simulator")
    print("‚ö° Health Check: http://localhost:8000/health")
    print("\nüí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô server")
    uvicorn.run(app, host="127.0.0.1", port=8000)